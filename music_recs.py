import streamlit as st
import openai

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª—é—á OpenAI –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit
openai.api_key = st.secrets["OPENAI_API_KEY"]

st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò", page_icon="üéØ")

st.title("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò –¥–ª—è –≤—Å–µ–≥–æ!")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

# --- –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
user_items = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç—Ä–µ–∫–∏, —Ñ–∏–ª—å–º—ã, –∏–≥—Ä—ã, —Å–µ—Ä–∏–∞–ª—ã –∏ —Ç.–¥.), —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Inception, Dark Souls, Stranger Things, The Beatles"
)

categories = st.text_input(
    "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
    placeholder="–ú—É–∑—ã–∫–∞, –§–∏–ª—å–º—ã, –ò–≥—Ä—ã, –°–µ—Ä–∏–∞–ª—ã"
)

context = st.text_input(
    "–ö–æ–Ω—Ç–µ–∫—Å—Ç / –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ / —Ü–µ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ—á—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏, –∏–∑—É—á–∞—é –∂–∞–Ω—Ä"
)

max_recs = st.slider("–°–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞ —Ä–∞–∑:", 5, 50, 15)

# --- –°–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ---
if "all_recs" not in st.session_state:
    st.session_state.all_recs = []

def get_recommendations(items, categories, context, max_recs=15):
    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–∏–µ –ª—é–±–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã: {items}.
–û–Ω —Ö–æ—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {categories}.
–ö–æ–Ω—Ç–µ–∫—Å—Ç/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/—Ü–µ–ª—å: {context}.
–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –º–∞–∫—Å–∏–º—É–º {max_recs} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. 
–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ù–∞–∑–≤–∞–Ω–∏–µ - –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.8
    )
    text = response.choices[0].message.content
    recs = [line.strip() for line in text.split("\n") if line.strip()]
    return recs

# --- –ö–Ω–æ–ø–∫–∏ ---
if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
    if user_items.strip() and categories.strip():
        recs = get_recommendations(user_items, categories, context, max_recs)
        st.session_state.all_recs = recs
        st.success(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!")
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")

if st.session_state.all_recs:
    st.subheader("–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for i, rec in enumerate(st.session_state.all_recs, 1):
        st.write(f"{i}. {rec}")

    if st.button("–•–æ—á—É –µ—â—ë"):
        more_recs = get_recommendations(user_items, categories, context, max_recs)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        st.session_state.all_recs += [r for r in more_recs if r not in st.session_state.all_recs]
        st.experimental_rerun()
