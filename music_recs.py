import streamlit as st
import openai
import pandas as pd

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit
openai.api_key = st.secrets["OPENAI_API_KEY"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if "history" not in st.session_state:
    st.session_state.history = []

st.title("üåü –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
st.subheader("–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?")
categories = st.multiselect(
    "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
    ["–ú—É–∑—ã–∫–∞", "–§–∏–ª—å–º—ã", "–°–µ—Ä–∏–∞–ª—ã", "–ò–≥—Ä—ã", "–ö–Ω–∏–≥–∏", "–ü–æ–¥–∫–∞—Å—Ç—ã"]
)

context = st.text_input("–î–æ–±–∞–≤—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/–∂–∞–Ω—Ä/–∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–æ–¥—Ä–æ–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)")

user_items = st.text_area(
    "–í–≤–µ–¥–∏ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", 
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Inception, Dark Souls, Stranger Things, Queen - Bohemian Rhapsody"
)

def get_recommendations(items, categories, context, max_recs=15):
    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–∏–µ –ª—é–±–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã: {items}.
–û–Ω —Ö–æ—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {', '.join(categories)}.
–ö–æ–Ω—Ç–µ–∫—Å—Ç/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/—Ü–µ–ª—å: {context}.
–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –º–∞–∫—Å–∏–º—É–º {max_recs} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. 
–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ù–∞–∑–≤–∞–Ω–∏–µ - –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.8
    )
    text = response.choices[0].message.content
    recs = [line.strip() for line in text.split("\n") if line.strip()]
    return recs

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
    if not categories or not user_items:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.")
    else:
        recs = get_recommendations(user_items, categories, context)
        st.session_state.history.extend(recs)
        st.success("–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for r in recs:
            st.write(r)

# –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É –µ—â—ë"
if st.button("–•–æ—á—É –µ—â—ë"):
    if not st.session_state.history:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
    else:
        more_recs = get_recommendations(
            ", ".join(user_items.split(",")),
            categories,
            context + " (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: " + ", ".join(st.session_state.history) + ")",
            max_recs=10
        )
        st.session_state.history.extend(more_recs)
        for r in more_recs:
            st.write(r)

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
if st.session_state.history:
    df = pd.DataFrame({"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": st.session_state.history})
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        df.to_csv(index=False, sep=";").encode("utf-8"),
        "recommendations.csv",
        "text/csv"
    )
